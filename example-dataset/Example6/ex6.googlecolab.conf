[general]
# Working directory
PROJECT_DIR=/content/ex6

# Path to template shellscript
SET_SHELL_ENV=/content/tools/Interstellar/example-dataset/templates/set_shell_env_colab

# SAMPLESHEET specifies the correspondence between the FASTQ file prefixes
# and their samplename (tab-separated).
#
# Example:
# heart_10k_v3_S1_L001	10X
# heart_10k_v3_S1_L002	10X
# 
# This means it gives two FASTQ files from a single sample sequenced by two lanes

SAMPLESHEET=/content/tools/Interstellar/example-dataset/Example5/samplesheet.tsv

[value_extraction]
# Path to input FASTQ files. FASTQ file names must include the fleprefixes indicated in SAMPLESHEET.
# 
# Example:
# READ1_PATH=/path/to/Input_dir/R1/*.fastq.gz
# READ2_PATH=/path/to/Input_dir/R2/*.fastq.gz
# 
# Alternatively, user can provide a directory path containing FASTQ files.
# READ1_PATH=/path/to/Input_dir/R1/
# READ2_PATH=/path/to/Input_dir/R2/

READ1_PATH=/content/tools/Interstellar/example-dataset/Example5/R1
READ2_PATH=/content/tools/Interstellar/example-dataset/Example5/R2

# Paired-end reads that sequenced overlapping regions can be merged into single reads. 
# Only a single pair of two reads among READ1, READ2, INDEX1 and INDEX2 can be merged. 
# The pair should be specified as 
# "READ1-READ2”, "READ2-READ1”, "READ1-INDEX1”, "INDEX1-READ1”, "READ1-INDEX2”, "INDEX2-READ1”, 
# "READ2-INDEX1”, "INDEX1-READ2”, "READ2-INDEX2”, "INDEX2-READ2”, "INDEX1-INDEX2"or "INDEX2-INDEX2”. 
# Direction of the merged read will follow that of the first read to be merged.
FLASH=READ1-READ2

# FLASH_MIN_OVERLAP 
# Corresponding to the -m option of FLASH2 that specifies the minimum overlap length. Default=20.
FLASH_MIN_OVERLAP=20

# FLASH_MAX_OVERLAP 
# Corresponding to the -M option of FLASH2 that specifies the maximum overlap length. Default=30.
FLASH_MAX_OVERLAP=100

# Read structures specified by regular expression.
# Variables specified by ?P<> are user-defined sequence segments. INTERSTELLAR adopts the extended 
# regular expression implemented in the regex library (https://pypi.org/project/regex/) that allows mismatches.
READ_FLASH_STRUCTURE_1=^.+(?P<plate1>.{9})(?P<PS1>TAACTTACGGAGTCGCTCTACG){s<=1}(?P<row_idx>.{9})(?P<DBU1>CCATACGAGCACATTACGGG){s<=2}(?P<bc1>.+)(?P<DBU2>CTAACTCGCATACCTCTGATAAC){s<=2}(?P<lox2272>.+)(?P<DBlox2272>TGTCAGCACTCTGTCAAAATAGATCG){s<=2}....(?P<DBD1>TCGATAGGTGCGTGTGAAGG){s<=2}(?P<bc2>.+)(?P<DBD2>CCTCAGTCGCTCAGTCAAG){s<=2}(?P<col_idx>.{9})(?P<PS2>CAGGACCTAAAGAATCCCATCC){s<=1}(?P<plate2>.{9}).*$
READ_FLASH_STRUCTURE_2=^.+(?P<plate1>.{9})(?P<PS1>TAACTTACGGAGTCGCTCTACG){s<=1}(?P<row_idx>.{9})(?P<DBloxP>TTAAGTAAGTAATGGCAAACAGCTATTAT){s<=2}(?P<loxp>.+){s<=2}(?P<DBU1>CCATACGAGCACATTACGGG){s<=2}(?P<bc1>.+)(?P<DBU2>CTAACTCGCATACCTCTGATAAC){s<=2}(?P<lox2272>.+){s<=2}(?P<DBlox2272>TGTCAGCACTCTGTCAAAATAGATCG){s<=2}(?P<col_idx>.{9})(?P<PS2>CAGGACCTAAAGAATCCCATCC){s<=1}(?P<plate2>.{9}).*$
READ_FLASH_STRUCTURE_3=^.+(?P<plate1>.{9})(?P<PS1>TAACTTACGGAGTCGCTCTACG){s<=1}(?P<row_idx>.{9})(?P<ADU1>CCCTTAGAACCGAGAGTGTG){s<=2}(?P<bc1>.+)(?P<ADU2>CACTCCGTTCGTCACTCAATAA){s<=2}...(?P<ADloxP>CAGCACTCTGTCAAAATAGATCGGAAA){s<=2}(?P<loxp>.+){s<=2}(?P<ADD1>CTCCAGGGTTAGGCAGATG){s<=2}(?P<bc2>.+)(?P<ADD2>CAATCGCACTATCCCGCTG){s<=2}(?P<col_idx>.{9})(?P<PS2>CAGGACCTAAAGAATCCCATCC){s<=1}(?P<plate2>.{9}).*$
READ_FLASH_STRUCTURE_4=^.+(?P<plate1>.{9})(?P<PS1>TAACTTACGGAGTCGCTCTACG){s<=1}(?P<row_idx>.{9})(?P<ADloxP>CAGCACTCTGTCAAAATAGATCGG){s<=2}...(?P<loxp>.+){s<=2}(?P<ADD1>CTCCAGGGTTAGGCAGATG){s<=2}(?P<bc2>.+)(?P<ADD2>CAATCGCACTATCCCGCTG){s<=2}(?P<lox2272>.+){s<=2}(?P<ADlox2272>TTATGGGTATTATGGGTTAGGGATAACAGGGTAATAAGCTCTAAGTAAGTAACGGCCGCC){s<=3}(?P<col_idx>.{9})(?P<PS2>CAGGACCTAAAGAATCCCATCC){s<=1}(?P<plate2>.{9}).*$

# Sequence filtering and correction for each segment
#
# - QUALITY_FILTER()
#   Filter segment sequences according to their Q scores with the following arguments:
#   * source (required)
#     Sequence segment variable name.
#  
#   * min_nucleotide_Q-score
#     Minimum per-base Q score threshold. Default=5.
# 
#   * min_avg_Q-score
#     Minimum average Q score threshold. Default=20.
#
# - I2M_CORRECTION()
#   Error-correct segment sequences by "imputation-to-majority."
#   * source
#     Sequence segment variable name. Not required If defined upstream and inherited by ">>"(see below).
#
#   * rank
#     Rank threshold for the minority-majority boundary of the rank-count plot of unique segment sequences. 
#     If this is set to "auto," the knee-point of the rank-count plot is adopted. Default=auto.
#
#   * levenshtein_distance
#     Maximum Levenshtein distance threshold allowed to correct sequences in the minority group to their 
#     nearest sequences in the majority group. Default=1.
#
# - M2A_CORRECTION()
#   Error-correct segment sequences by “mapping-to-allowlist.”
#
#   * source
#     Sequence segment variable name. Not required if defined upstream and inherited by “>>” (see below).
#
#   * path (required)
#     Path to the sequence allowlist.
#
#   * levenshtein_distance
#     Maximum Levenshtein distance threshold allowed to correct the input sequences to their nearest sequences 
#     in the allowlist. Default=1.
#
# - BARTENDER_CORRECTION()
#   Error-correct segment sequences using Bartender (URL). Please see Bartender’s manual for details.
#
#   * source
#     Sequence segment variable name. Not required if defined upstream and inherited by “>>” (see below).
#
#   * -c
#     Sequence frequency cutoff.
#
#   * -d
#     Maximum cluster distance that may be merged.
#
#   * -z
#     Cluster merging threshold.
#
#   * -l
#     Seed length.
#
#   * -s
#     Number of non-overlapping positions between two adjacent seeds.
#
# - CUSTOM_CORRECTION()
#   Error-correct segment sequences using a user-provided shell script.
#
#   * source
#     Sequence segment variable name. Not required if defined upstream and inherited by “>>” (see below).
#
#   * shell_script
#     Path to the shell script.
#     The script must be designed to accept an input sequence segment list in a TSV (tab-separated value) file format 
#     as the first argument $1 and output the conversion result in STDOUT in a TSV format at the second argument $2 of the shell script.
#
# - SEQ2VALUE()
#   Convert segment sequences into (unoptimized) segment values. This process is required if the segment sequences are supposed 
#   to be translated into different sequences.
#   * source
#     source Sequence segment variable name. Not required if defined upstream and inherited by “>>” (see below).
#
# - Pipe-like operator
#   “>>” can be used as a pipe-like operator, connecting multiple processes in one line.

plate1.filtered.corrected=QUALITY_FILTER(source:plate1,min_nucleotide_Q-score:10,min_avg_Q-score:20) >> M2A_CORRECTION(levenshtein_distance:1, path:/content/tools/Interstellar/example-dataset/allowlists/rcppcr_illumina_idx.txt)
plate2.filtered.corrected =QUALITY_FILTER(source:plate2,min_nucleotide_Q-score:10,min_avg_Q-score:20) >> M2A_CORRECTION(levenshtein_distance:1, path:/content/tools/Interstellar/example-dataset/allowlists/rcppcr_illumina_idx.txt)
row_idx.filtered.corrected =QUALITY_FILTER(source:row_idx,min_nucleotide_Q-score:10,min_avg_Q-score:20) >> M2A_CORRECTION(levenshtein_distance:1, path:/content/tools/Interstellar/example-dataset/allowlists/rcppcr_illumina_idx.txt)
col_idx.filtered.corrected =QUALITY_FILTER(source:col_idx,min_nucleotide_Q-score:10,min_avg_Q-score:20) >> M2A_CORRECTION(levenshtein_distance:1, path:/content/tools/Interstellar/example-dataset/allowlists/rcppcr_illumina_idx.txt)

bc1.filtered=QUALITY_FILTER(source:bc1,min_nucleotide_Q-score:10,min_avg_Q-score:20)
bc2.filtered=QUALITY_FILTER(source:bc2,min_nucleotide_Q-score:10,min_avg_Q-score:20)
lox2272.filtered=QUALITY_FILTER(source:lox2272,min_nucleotide_Q-score:10,min_avg_Q-score:20)
DBlox2272.filtered=QUALITY_FILTER(source:DBlox2272,min_nucleotide_Q-score:10,min_avg_Q-score:20)
DBloxP.filtered=QUALITY_FILTER(source:DBloxP,min_nucleotide_Q-score:10,min_avg_Q-score:20)
ADloxP.filtered=QUALITY_FILTER(source:ADloxP,min_nucleotide_Q-score:10,min_avg_Q-score:20)
loxp.filtered=QUALITY_FILTER(source:loxp,min_nucleotide_Q-score:10,min_avg_Q-score:20)
ADlox2272.filtered=QUALITY_FILTER(source:ADlox2272,min_nucleotide_Q-score:10,min_avg_Q-score:20)



[demultiplex]
# Source segment(s) to demultiplex the input reads. Use comma-separated values if multiple segments are used for this process. 
# If not provided, the reads are not demultiplexed into separate FASTQ files (only available if FORMAT=FASTQ).
KEY=plate1.filtered.corrected,plate2.filtered.corrected,row_idx.filtered.corrected,col_idx.filtered.corrected

# Export data format, FASTQ or TSV
FORMAT=FASTQ

# Output read structure if FORMAT=fastq
READ1_STRUCTURE=bc1.filtered+bc2.filtered+"TTTTTTTT"

# Header annotation
READ1_HEADER_ADDITION=row_idx.filtered.corrected,col_idx.filtered.corrected
