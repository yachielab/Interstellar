[general]
# Working directory
PROJECT_DIR=/path/to/project_dir
 
# Path to the shellscript template.
# Lines used in all the shell scripts generated by INTERSTELLAR, 
# such as shebang and conda activate should be included.

SET_SHELL_ENV=/path/to/set_shell_env

# SAMPLESHEET specifies the correspondence between the FASTQ file prefixes
# and their samplename (tab-separated).
#
# Example:
# heart_10k_v3_S1_L001	10X
# heart_10k_v3_S1_L002	10X
# 
# This means it gives two FASTQ files from a single sample sequenced by two lanes

SAMPLESHEET=/path/to/example-dataset/Example3/samplesheet.tsv

[value_extraction]
# Path to input FASTQ files. FASTQ file names must include the fleprefixes indicated in SAMPLESHEET.
# 
# Example:
# READ1_PATH=/path/to/Input_dir/R1/*.fastq.gz
# READ2_PATH=/path/to/Input_dir/R2/*.fastq.gz
# 
# Alternatively, user can provide a directory path containing FASTQ files.
# READ1_PATH=/path/to/Input_dir/R1/
# READ2_PATH=/path/to/Input_dir/R2/

READ1_PATH=/path/to/Interstellar/example-dataset/Example1/R1
READ2_PATH=/path/to/Interstellar/example-dataset/Example1/R2
 
# Read structures specified by regular expression.
# Variables specified by ?P<> are user-defined sequence segments. INTERSTELLAR adopts the extended 
# regular expression implemented in the regex library (https://pypi.org/project/regex/) that allows mismatches.

READ1_STRUCTURE=^(?P<src_segment1>.{12})(?P<src_segment2>.{8}).*$
READ2_STRUCTURE=^(?P<src_segment3>.*)$
 
# Parental-local variable allocations.
# Under this allocation, sequence-to-value conversion of the local segment(s) is independently performed for its parental segment. 
# For example, cell IDs and UMIs of typical scRNA-seq reads can be defined as parental segments and their local segments, respectively,
# where the same UMI sequences associated with different cell IDs are interpreted as different objects. 
#
# Ex. 1) seg1 is a local variable of seg2:
# seg1 = CHILD_OF(seg2)
# 
# Ex. 2) seg2 and seg3 together consist of a combinatorial variable where seg1 is local to them:
# seg1 = CHILD_OF(seg2,seg3)
#
# Ex. 3) a combinatorial variable (seg1, seg2) is local to another combinatorial variable (seg3, seg4):
# seg1,seg2 = CHILD_OF(seg3,seg4)

src_segment2=CHILD_OF(src_segment1)
 
# Sequence quality filtration
segment1.filtered = QUALITY_FILTER(source: src_segment1, min_nucleotide_Q-score:5, min_avg_Q-score:20)
segment2.filtered = QUALITY_FILTER(source: src_segment2, min_nucleotide_Q-score:5, min_avg_Q-score:20)
segment3.filtered = QUALITY_FILTER(source: src_segment3, min_nucleotide_Q-score:5, min_avg_Q-score:20)

# Knee correction for cell barcodes
segment1.filtered.kneed = I2M_CORRECTION(source:segment1.filtered, levenshtein_distance:1)

# Sequence to value conversion for cell barcodes and UMIs
segment1.value = SEQ2VALUE(source:segment1.filtered.kneed)
segment2.value = SEQ2VALUE(source:segment2.filtered)


[value_translation]
# Definition of destination segments
dest_segment1=VALUE2SEQ(source: segment1.value, allowlist_path:/path/to/3M-february-2018.txt)
dest_segment2=VALUE2SEQ(source: segment2.value, randseq_pattern:NNNNNNNNNNNN)
dest_segment3=segment3.filtered
 
# Read structure configuration
READ1_STRUCTURE=dest_segment1+dest_segment2
READ2_STRUCTURE=dest_segment3

