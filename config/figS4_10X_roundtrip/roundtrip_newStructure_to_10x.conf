[general]
# Working directory
PROJECT_DIR= /path/to/new_to_10x_roundtrip/

# Path to the shellscript template.
# Lines used in all the shell scripts generated by INTERSTELLAR, 
# such as shebang and conda activate should be included.

SET_SHELL_ENV= /path/to/set_shell_env

# SAMPLESHEET specifies the correspondence between the FASTQ file prefixes
# and their samplename (tab-separated).
#
# Example:
# heart_10k_v3_S1_L001	10X
# heart_10k_v3_S1_L002	10X
# 
# This means it gives two FASTQ files from a single sample sequenced by two lanes

SAMPLESHEET=/path/to/samplesheet

[value_extraction]
# Path to input FASTQ files. FASTQ file names must include the fleprefixes indicated in SAMPLESHEET.
# 
# Example:
# READ1_PATH=/path/to/Input_dir/R1/*.fastq.gz
# READ2_PATH=/path/to/Input_dir/R2/*.fastq.gz
# 
# Alternatively, user can provide a directory path containing FASTQ files.
# READ1_PATH=/path/to/Input_dir/R1/
# READ2_PATH=/path/to/Input_dir/R2/

READ1_PATH=/path/to/R1
READ2_PATH=/path/to/R2
INDEX1_PATH=/path/to/I1
INDEX2_PATH=/path/to/I2

# Read structures specified by regular expression.
# Variables specified by ?P<> are user-defined sequence segments. INTERSTELLAR adopts the extended 
# regular expression implemented in the regex library (https://pypi.org/project/regex/) that allows mismatches.

INDEX1_STRUCTURE=^(?P<r_b2_2>.{2})(?P<r_b2_3>.{2})(?P<r_b2_4>.{2})(?P<r_b1_1>.{2})(?P<r_b1_2>.{2})(?P<r_b1_3>.{2})TCTC$
INDEX2_STRUCTURE=^(?P<r_b2_1>.{2})(?P<raw_bio>.*)$ 
READ1_STRUCTURE=^(?P<r_umi1>.{2})(?P<r_umi2>.{2})(?P<r_umi3>.{2})(?P<r_umi4>.{2})ATAT(?P<r_umi5>.{2})$
READ2_STRUCTURE=^(?P<r_cb1>.{5})(?P<r_cb2>.{5})CCCC(?P<r_cb3>.{5})(?P<r_cb4>.{5})(?P<r_cb5>.{5})$

# Parental-local variable allocations.
# Under this allocation, sequence-to-value conversion of the local segment(s) is independently performed for its parental segment. 
# For example, cell IDs and UMIs of typical scRNA-seq reads can be defined as parental segments and their local segments, respectively,
# where the same UMI sequences associated with different cell IDs are interpreted as different objects. 
#
# Ex. 1) seg1 is a local variable of seg2:
# seg1 = CHILD_OF(seg2)
# 
# Ex. 2) seg2 and seg3 together consist of a combinatorial variable where seg1 is local to them:
# seg1 = CHILD_OF(seg2,seg3)
#
# Ex. 3) a combinatorial variable (seg1, seg2) is local to another combinatorial variable (seg3, seg4):
# seg1,seg2 = CHILD_OF(seg3,seg4)

r_b2_1,r_b2_2,r_b2_3,r_b2_4=CHILD_OF(r_b1_1,r_b1_2,r_b1_3)
r_cb1,r_cb2,r_cb3,r_cb4,r_cb5=CHILD_OF(r_b2_1,r_b2_2,r_b2_3,r_b2_4)
r_umi1,r_umi2,r_umi3,r_umi4,r_umi5=CHILD_OF(r_cb1,r_cb2,r_cb3,r_cb4,r_cb5)

# Sequence filtering and correction for each segment
#
# - QUALITY_FILTER()
#   Filter segment sequences according to their Q scores with the following arguments:
#   * source (required)
#     Sequence segment variable name.
#  
#   * min_nucleotide_Q-score
#     Minimum per-base Q score threshold. Default=5.
# 
#   * min_avg_Q-score
#     Minimum average Q score threshold. Default=20.
#
# - I2M_CORRECTION()
#   Error-correct segment sequences by "imputation-to-majority."
#   * source
#     Sequence segment variable name. Not required If defined upstream and inherited by ">>"(see below).
#
#   * rank
#     Rank threshold for the minority-majority boundary of the rank-count plot of unique segment sequences. 
#     If this is set to "auto," the knee-point of the rank-count plot is adopted. Default=auto.
#
#   * levenshtein_distance
#     Maximum Levenshtein distance threshold allowed to correct sequences in the minority group to their 
#     nearest sequences in the majority group. Default=1.
#
# - M2A_CORRECTION()
#   Error-correct segment sequences by “mapping-to-allowlist.”
#
#   * source
#     Sequence segment variable name. Not required if defined upstream and inherited by “>>” (see below).
#
#   * path (required)
#     Path to the sequence allowlist.
#
#   * levenshtein_distance
#     Maximum Levenshtein distance threshold allowed to correct the input sequences to their nearest sequences 
#     in the allowlist. Default=1.
#
# - BARTENDER_CORRECTION()
#   Error-correct segment sequences using Bartender (URL). Please see Bartender’s manual for details.
#
#   * source
#     Sequence segment variable name. Not required if defined upstream and inherited by “>>” (see below).
#
#   * -c
#     Sequence frequency cutoff.
#
#   * -d
#     Maximum cluster distance that may be merged.
#
#   * -z
#     Cluster merging threshold.
#
#   * -l
#     Seed length.
#
#   * -s
#     Number of non-overlapping positions between two adjacent seeds.
#
# - CUSTOM_CORRECTION()
#   Error-correct segment sequences using a user-provided shell script.
#
#   * source
#     Sequence segment variable name. Not required if defined upstream and inherited by “>>” (see below).
#
#   * shell_script
#     Path to the shell script.
#     The script must be designed to accept an input sequence segment list in a TSV (tab-separated value) file format 
#     as the first argument $1 and output the conversion result in STDOUT in a TSV format at the second argument $2 of the shell script.
#
# - SEQ2VALUE()
#   Convert segment sequences into (unoptimized) segment values. This process is required if the segment sequences are supposed 
#   to be translated into different sequences.
#   * source
#     source Sequence segment variable name. Not required if defined upstream and inherited by “>>” (see below).
#
# - Pipe-like operator
#   “>>” can be used as a pipe-like operator, connecting multiple processes in one line.

b1_1.val = SEQ2VALUE(source:r_b1_1)
b1_2.val = SEQ2VALUE(source:r_b1_2)
b1_3.val = SEQ2VALUE(source:r_b1_3)

b2_1.val = SEQ2VALUE(source:r_b2_1)
b2_2.val = SEQ2VALUE(source:r_b2_2)
b2_3.val = SEQ2VALUE(source:r_b2_3)
b2_4.val = SEQ2VALUE(source:r_b2_4)

cb1.val = SEQ2VALUE(source:r_cb1)
cb2.val = SEQ2VALUE(source:r_cb2)
cb3.val = SEQ2VALUE(source:r_cb3)
cb4.val = SEQ2VALUE(source:r_cb4)
cb5.val = SEQ2VALUE(source:r_cb5)

umi1.val = SEQ2VALUE(source:r_umi1)
umi2.val = SEQ2VALUE(source:r_umi2)
umi3.val = SEQ2VALUE(source:r_umi3)
umi4.val = SEQ2VALUE(source:r_umi4)
umi5.val = SEQ2VALUE(source:r_umi5)


[value_translation]
# Defining destination segment sequences
# The destination sequence segments can be defined by VALUE2SEQ() or SEQ2SEQ(), or by directly assigning source sequence segments.
# The following functions can be used for producing defining sequence segments.
#
# - VALUE2SEQ()
#   Assign destination segment sequences to values so they fit to an allowlist or destination sequence segment structure. 
#   In this section, value space optimization is automatically performed for source segment values according to the segment grouping rules and 
#   parental-local segment value allocations defined in the value_extraction section. 
#   The value space optimization is not performed if any parental-local segment value allocation is defined earlier.
#
#   * source (required)
#     Value names. Comma-separated values if multiple values are translated into a sequence segment. Note that the source segment combinations used in
#
#   * allowlist_path
#     Path to the destination sequence allowlist. If multiple destination sequence segments are to be generated, provide their corresponding allowlists 
#     as comma-separated values in the same order of destination sequence segments.
#
#   * randseq_pattern
#     Destination sequence segment structure defined by IUPAC codes. If multiple destination sequence segments are to be defined, provide their corresponding 
#     allowlists as comma-separated values in the same order of destination sequence segments.
#
# - SEQ2SEQ() 
#   Assign destination segment sequences defined for their corresponding source segment sequences according to a user-defined sequence conversion table.
#
#   * source (required):
#     Source sequence segment name. Comma-separated values if multiple source segments are converted into a destination sequence(s).
#
#   * conversion_table
#     Path to the sequence conversion table (TSV file format). The header line must correspond to the target source and destination sequence segment names 
#     defined in the configuration file. Each SEQ2SEQ function requires a unique sequence conversion table.
#
# Bequeathing a source segment Source sequence segment variables can be used to define destination reads.

ex_bio=raw_bio
ex_pbc1=VALUE2SEQ(source:b1_1.val,b1_2.val,b1_3.val, randseq_pattern:NNNNNNNNNNNNNNN)
ex_pbc2=VALUE2SEQ(source:b2_1.val,b2_2.val,b2_3.val,b2_4.val, randseq_pattern:NNNNNNNNNN)
ex_umi =VALUE2SEQ(source:umi1.val,umi2.val,umi3.val,umi4.val,umi5.val, randseq_pattern:NNNNNNNNNNNN)
ex_cb  =VALUE2SEQ(source:cb1.val,cb2.val,cb3.val,cb4.val,cb5.val, allowlist_path:/path/to/10x_3M-february-2018.txt)

# Read structure configuration
# Destination read structures can be defined by concatenating destination sequence segments using “+”.

INDEX1_STRUCTURE=ex_pbc1
INDEX2_STRUCTURE=ex_pbc2
READ1_STRUCTURE =ex_cb+ex_umi
READ2_STRUCTURE =ex_bio
